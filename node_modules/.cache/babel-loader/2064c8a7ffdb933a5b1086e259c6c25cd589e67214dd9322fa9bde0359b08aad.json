{"ast":null,"code":"import _slicedToArray from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _ERRORS;\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Analytics.\r\n */\nvar ANALYTICS_TYPE = 'analytics';\n// Key to attach FID to in gtag params.\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, 'A Firebase Analytics instance with the appId {$id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each appId.'), _defineProperty(_ERRORS, \"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */, 'initializeAnalytics() cannot be called again with different options than those ' + 'it was initially called with. It can be called again with the same options to ' + 'return the existing instance, or getAnalytics() can be used ' + 'to get a reference to the already-intialized instance.'), _defineProperty(_ERRORS, \"already-initialized-settings\" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */, 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.'), _defineProperty(_ERRORS, \"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, 'Firebase Analytics Interop Component failed to instantiate: {$reason}'), _defineProperty(_ERRORS, \"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, 'Firebase Analytics is not supported in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}'), _defineProperty(_ERRORS, \"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, 'IndexedDB unavailable or restricted in this environment. ' + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments. Details: {$errorInfo}'), _defineProperty(_ERRORS, \"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, 'The config fetch request timed out while in an exponential backoff state.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.'), _defineProperty(_ERRORS, \"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}'), _defineProperty(_ERRORS, \"no-api-key\" /* AnalyticsError.NO_API_KEY */, 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid API key.'), _defineProperty(_ERRORS, \"no-app-id\" /* AnalyticsError.NO_APP_ID */, 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' + 'contain a valid app ID.'), _defineProperty(_ERRORS, \"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Verifies and creates a TrustedScriptURL.\r\n */\nfunction createGtagTrustedTypesScriptURL(url) {\n  if (!url.startsWith(GTAG_URL)) {\n    var err = ERROR_FACTORY.create(\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n  return url;\n}\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\nfunction promiseAllSettled(promises) {\n  return Promise.all(promises.map(function (promise) {\n    return promise.catch(function (e) {\n      return e;\n    });\n  }));\n}\n/**\r\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\r\n *\r\n * @param policyName A string containing the name of the policy\r\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\r\n * | the TrustedTypePolicy reference documentation}.\r\n */\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  var trustedTypesPolicy;\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\n  }\n  return trustedTypesPolicy;\n}\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction insertScriptTag(dataLayerName, measurementId) {\n  var trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\n    createScriptURL: createGtagTrustedTypesScriptURL\n  });\n  var script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  var gtagScriptURL = \"\".concat(GTAG_URL, \"?l=\").concat(dataLayerName, \"&id=\").concat(measurementId);\n  script.src = trustedTypesPolicy ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL) : gtagScriptURL;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\nfunction gtagOnConfig(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _gtagOnConfig.apply(this, arguments);\n}\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\nfunction _gtagOnConfig() {\n  _gtagOnConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\n    var correspondingAppId, dynamicConfigResults, foundConfig;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          // If config is already fetched, we know the appId and can use it to look up what FID promise we\n          /// are waiting for, and wait only on that one.\n          correspondingAppId = measurementIdToAppId[measurementId];\n          _context2.prev = 1;\n          if (!correspondingAppId) {\n            _context2.next = 7;\n            break;\n          }\n          _context2.next = 5;\n          return initializationPromisesMap[correspondingAppId];\n        case 5:\n          _context2.next = 14;\n          break;\n        case 7:\n          _context2.next = 9;\n          return promiseAllSettled(dynamicConfigPromisesList);\n        case 9:\n          dynamicConfigResults = _context2.sent;\n          foundConfig = dynamicConfigResults.find(function (config) {\n            return config.measurementId === measurementId;\n          });\n          if (!foundConfig) {\n            _context2.next = 14;\n            break;\n          }\n          _context2.next = 14;\n          return initializationPromisesMap[foundConfig.appId];\n        case 14:\n          _context2.next = 19;\n          break;\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](1);\n          logger.error(_context2.t0);\n        case 19:\n          gtagCore(\"config\" /* GtagCommand.CONFIG */, measurementId, gtagParams);\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2, null, [[1, 16]]);\n  }));\n  return _gtagOnConfig.apply(this, arguments);\n}\nfunction gtagOnEvent(_x7, _x8, _x9, _x10, _x11) {\n  return _gtagOnEvent.apply(this, arguments);\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\nfunction _gtagOnEvent() {\n  _gtagOnEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\n    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _iterator, _step, _loop, _ret;\n    return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n          // an initializeIds() promise we are waiting for.\n          if (!(gtagParams && gtagParams['send_to'])) {\n            _context4.next = 27;\n            break;\n          }\n          gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n          if (!Array.isArray(gaSendToList)) {\n            gaSendToList = [gaSendToList];\n          }\n          // Checking 'send_to' fields requires having all measurement ID results back from\n          // the dynamic config fetch.\n          _context4.next = 7;\n          return promiseAllSettled(dynamicConfigPromisesList);\n        case 7:\n          dynamicConfigResults = _context4.sent;\n          _iterator = _createForOfIteratorHelper(gaSendToList);\n          _context4.prev = 9;\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n            var sendToId, foundConfig, initializationPromise;\n            return _regeneratorRuntime().wrap(function _loop$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  sendToId = _step.value;\n                  // Any fetched dynamic measurement ID that matches this 'send_to' ID\n                  foundConfig = dynamicConfigResults.find(function (config) {\n                    return config.measurementId === sendToId;\n                  });\n                  initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\n                  if (!initializationPromise) {\n                    _context3.next = 7;\n                    break;\n                  }\n                  initializationPromisesToWaitFor.push(initializationPromise);\n                  _context3.next = 9;\n                  break;\n                case 7:\n                  // Found an item in 'send_to' that is not associated\n                  // directly with an FID, possibly a group.  Empty this array,\n                  // exit the loop early, and let it get populated below.\n                  initializationPromisesToWaitFor = [];\n                  return _context3.abrupt(\"return\", \"break\");\n                case 9:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _loop);\n          });\n          _iterator.s();\n        case 12:\n          if ((_step = _iterator.n()).done) {\n            _context4.next = 19;\n            break;\n          }\n          return _context4.delegateYield(_loop(), \"t0\", 14);\n        case 14:\n          _ret = _context4.t0;\n          if (!(_ret === \"break\")) {\n            _context4.next = 17;\n            break;\n          }\n          return _context4.abrupt(\"break\", 19);\n        case 17:\n          _context4.next = 12;\n          break;\n        case 19:\n          _context4.next = 24;\n          break;\n        case 21:\n          _context4.prev = 21;\n          _context4.t1 = _context4[\"catch\"](9);\n          _iterator.e(_context4.t1);\n        case 24:\n          _context4.prev = 24;\n          _iterator.f();\n          return _context4.finish(24);\n        case 27:\n          // This will be unpopulated if there was no 'send_to' field , or\n          // if not all entries in the 'send_to' field could be mapped to\n          // a FID. In these cases, wait on all pending initialization promises.\n          if (initializationPromisesToWaitFor.length === 0) {\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\n          }\n          // Run core gtag function with args after all relevant initialization\n          // promises have been resolved.\n          _context4.next = 30;\n          return Promise.all(initializationPromisesToWaitFor);\n        case 30:\n          // Workaround for http://b/141370449 - third argument cannot be undefined.\n          gtagCore(\"event\" /* GtagCommand.EVENT */, measurementId, gtagParams || {});\n          _context4.next = 36;\n          break;\n        case 33:\n          _context4.prev = 33;\n          _context4.t2 = _context4[\"catch\"](0);\n          logger.error(_context4.t2);\n        case 36:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee3, null, [[0, 33], [9, 21, 24, 27]]);\n  }));\n  return _gtagOnEvent.apply(this, arguments);\n}\nfunction wrapGtag(gtagCore,\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\ninitializationPromisesMap,\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\ndynamicConfigPromisesList,\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\nmeasurementIdToAppId) {\n  /**\r\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n   * @param command Gtag command type.\r\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n   * @param gtagParams Params if event is EVENT/CONFIG.\r\n   */\n  function gtagWrapper(_x12, _x13, _x14) {\n    return _gtagWrapper.apply(this, arguments);\n  }\n  function _gtagWrapper() {\n    _gtagWrapper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(command, idOrNameOrParams, gtagParams) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            if (!(command === \"event\" /* GtagCommand.EVENT */)) {\n              _context.next = 6;\n              break;\n            }\n            _context.next = 4;\n            return gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams);\n          case 4:\n            _context.next = 12;\n            break;\n          case 6:\n            if (!(command === \"config\" /* GtagCommand.CONFIG */)) {\n              _context.next = 11;\n              break;\n            }\n            _context.next = 9;\n            return gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams);\n          case 9:\n            _context.next = 12;\n            break;\n          case 11:\n            if (command === \"consent\" /* GtagCommand.CONSENT */) {\n              // If CONFIG, second arg must be measurementId.\n              gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'update', gtagParams);\n            } else {\n              // If SET, second arg must be params.\n              gtagCore(\"set\" /* GtagCommand.SET */, idOrNameOrParams);\n            }\n          case 12:\n            _context.next = 17;\n            break;\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            logger.error(_context.t0);\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 14]]);\n    }));\n    return _gtagWrapper.apply(this, arguments);\n  }\n  return gtagWrapper;\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function gtagCore() {\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n    // Must push IArguments object, not an array.\n    window[dataLayerName].push(arguments);\n  };\n  // Replace it with existing one if found\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns the script tag in the DOM matching both the gtag url pattern\r\n * and the provided data layer name.\r\n */\nfunction findGtagScriptOnPage(dataLayerName) {\n  var scriptTags = window.document.getElementsByTagName('script');\n  for (var _i = 0, _Object$values = Object.values(scriptTags); _i < _Object$values.length; _i++) {\n    var tag = _Object$values[_i];\n    if (tag.src && tag.src.includes(GTAG_URL) && tag.src.includes(dataLayerName)) {\n      return tag;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\nvar LONG_RETRY_FACTOR = 30;\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\nvar BASE_INTERVAL_MILLIS = 1000;\n/**\r\n * Stubbable retry data storage class.\r\n */\nvar RetryData = /*#__PURE__*/function () {\n  function RetryData() {\n    var throttleMetadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var intervalMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : BASE_INTERVAL_MILLIS;\n    _classCallCheck(this, RetryData);\n    this.throttleMetadata = throttleMetadata;\n    this.intervalMillis = intervalMillis;\n  }\n  _createClass(RetryData, [{\n    key: \"getThrottleMetadata\",\n    value: function getThrottleMetadata(appId) {\n      return this.throttleMetadata[appId];\n    }\n  }, {\n    key: \"setThrottleMetadata\",\n    value: function setThrottleMetadata(appId, metadata) {\n      this.throttleMetadata[appId] = metadata;\n    }\n  }, {\n    key: \"deleteThrottleMetadata\",\n    value: function deleteThrottleMetadata(appId) {\n      delete this.throttleMetadata[appId];\n    }\n  }]);\n  return RetryData;\n}();\nvar defaultRetryData = new RetryData();\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\nfunction getHeaders(apiKey) {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction fetchDynamicConfig(_x15) {\n  return _fetchDynamicConfig.apply(this, arguments);\n}\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\nfunction _fetchDynamicConfig() {\n  _fetchDynamicConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(appFields) {\n    var _a, appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;\n    return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          appId = appFields.appId, apiKey = appFields.apiKey;\n          request = {\n            method: 'GET',\n            headers: getHeaders(apiKey)\n          };\n          appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n          _context5.next = 5;\n          return fetch(appUrl, request);\n        case 5:\n          response = _context5.sent;\n          if (!(response.status !== 200 && response.status !== 304)) {\n            _context5.next = 18;\n            break;\n          }\n          errorMessage = '';\n          _context5.prev = 8;\n          _context5.next = 11;\n          return response.json();\n        case 11:\n          jsonResponse = _context5.sent;\n          if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\n            errorMessage = jsonResponse.error.message;\n          }\n          _context5.next = 17;\n          break;\n        case 15:\n          _context5.prev = 15;\n          _context5.t0 = _context5[\"catch\"](8);\n        case 17:\n          throw ERROR_FACTORY.create(\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, {\n            httpStatus: response.status,\n            responseMessage: errorMessage\n          });\n        case 18:\n          return _context5.abrupt(\"return\", response.json());\n        case 19:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee4, null, [[8, 15]]);\n  }));\n  return _fetchDynamicConfig.apply(this, arguments);\n}\nfunction fetchDynamicConfigWithRetry(_x16) {\n  return _fetchDynamicConfigWithRetry.apply(this, arguments);\n}\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\nfunction _fetchDynamicConfigWithRetry() {\n  _fetchDynamicConfigWithRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(app) {\n    var retryData,\n      timeoutMillis,\n      _app$options,\n      appId,\n      apiKey,\n      measurementId,\n      throttleMetadata,\n      signal,\n      _args8 = arguments;\n    return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          retryData = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : defaultRetryData;\n          timeoutMillis = _args8.length > 2 ? _args8[2] : undefined;\n          _app$options = app.options, appId = _app$options.appId, apiKey = _app$options.apiKey, measurementId = _app$options.measurementId;\n          if (appId) {\n            _context7.next = 5;\n            break;\n          }\n          throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n        case 5:\n          if (apiKey) {\n            _context7.next = 9;\n            break;\n          }\n          if (!measurementId) {\n            _context7.next = 8;\n            break;\n          }\n          return _context7.abrupt(\"return\", {\n            measurementId: measurementId,\n            appId: appId\n          });\n        case 8:\n          throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n        case 9:\n          throttleMetadata = retryData.getThrottleMetadata(appId) || {\n            backoffCount: 0,\n            throttleEndTimeMillis: Date.now()\n          };\n          signal = new AnalyticsAbortSignal();\n          setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n              while (1) switch (_context6.prev = _context6.next) {\n                case 0:\n                  // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n                  signal.abort();\n                case 1:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }, _callee5);\n          })), timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\n          return _context7.abrupt(\"return\", attemptFetchDynamicConfigWithRetry({\n            appId: appId,\n            apiKey: apiKey,\n            measurementId: measurementId\n          }, throttleMetadata, signal, retryData));\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee6);\n  }));\n  return _fetchDynamicConfigWithRetry.apply(this, arguments);\n}\nfunction attemptFetchDynamicConfigWithRetry(_x17, _x18, _x19) {\n  return _attemptFetchDynamicConfigWithRetry.apply(this, arguments);\n}\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\nfunction _attemptFetchDynamicConfigWithRetry() {\n  _attemptFetchDynamicConfigWithRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(appFields, _ref, signal) {\n    var throttleEndTimeMillis,\n      backoffCount,\n      retryData,\n      _a,\n      appId,\n      measurementId,\n      response,\n      error,\n      backoffMillis,\n      throttleMetadata,\n      _args9 = arguments;\n    return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          throttleEndTimeMillis = _ref.throttleEndTimeMillis, backoffCount = _ref.backoffCount;\n          retryData = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : defaultRetryData;\n          appId = appFields.appId, measurementId = appFields.measurementId; // Starts with a (potentially zero) timeout to support resumption from stored state.\n          // Ensures the throttle end time is honored if the last attempt timed out.\n          // Note the SDK will never make a request if the fetch timeout expires at this point.\n          _context8.prev = 3;\n          _context8.next = 6;\n          return setAbortableTimeout(signal, throttleEndTimeMillis);\n        case 6:\n          _context8.next = 14;\n          break;\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](3);\n          if (!measurementId) {\n            _context8.next = 13;\n            break;\n          }\n          logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" + \" Falling back to the measurement ID \".concat(measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config. [\".concat(_context8.t0 === null || _context8.t0 === void 0 ? void 0 : _context8.t0.message, \"]\"));\n          return _context8.abrupt(\"return\", {\n            appId: appId,\n            measurementId: measurementId\n          });\n        case 13:\n          throw _context8.t0;\n        case 14:\n          _context8.prev = 14;\n          _context8.next = 17;\n          return fetchDynamicConfig(appFields);\n        case 17:\n          response = _context8.sent;\n          // Note the SDK only clears throttle state if response is success or non-retriable.\n          retryData.deleteThrottleMetadata(appId);\n          return _context8.abrupt(\"return\", response);\n        case 22:\n          _context8.prev = 22;\n          _context8.t1 = _context8[\"catch\"](14);\n          error = _context8.t1;\n          if (isRetriableError(error)) {\n            _context8.next = 33;\n            break;\n          }\n          retryData.deleteThrottleMetadata(appId);\n          if (!measurementId) {\n            _context8.next = 32;\n            break;\n          }\n          logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" + \" Falling back to the measurement ID \".concat(measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config. [\".concat(error === null || error === void 0 ? void 0 : error.message, \"]\"));\n          return _context8.abrupt(\"return\", {\n            appId: appId,\n            measurementId: measurementId\n          });\n        case 32:\n          throw _context8.t1;\n        case 33:\n          backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis); // Increments backoff state.\n          throttleMetadata = {\n            throttleEndTimeMillis: Date.now() + backoffMillis,\n            backoffCount: backoffCount + 1\n          }; // Persists state.\n          retryData.setThrottleMetadata(appId, throttleMetadata);\n          logger.debug(\"Calling attemptFetch again in \".concat(backoffMillis, \" millis\"));\n          return _context8.abrupt(\"return\", attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData));\n        case 38:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee7, null, [[3, 8], [14, 22]]);\n  }));\n  return _attemptFetchDynamicConfigWithRetry.apply(this, arguments);\n}\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis);\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(function () {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(ERROR_FACTORY.create(\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\nvar AnalyticsAbortSignal = /*#__PURE__*/function () {\n  function AnalyticsAbortSignal() {\n    _classCallCheck(this, AnalyticsAbortSignal);\n    this.listeners = [];\n  }\n  _createClass(AnalyticsAbortSignal, [{\n    key: \"addEventListener\",\n    value: function addEventListener(listener) {\n      this.listeners.push(listener);\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }]);\n  return AnalyticsAbortSignal;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Event parameters to set on 'gtag' during initialization.\r\n */\nvar defaultEventParametersForInit;\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\nfunction logEvent$1(_x20, _x21, _x22, _x23, _x24) {\n  return _logEvent$.apply(this, arguments);\n}\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\nfunction _logEvent$() {\n  _logEvent$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(gtagFunction, initializationPromise, eventName, eventParams, options) {\n    var measurementId, params;\n    return _regeneratorRuntime().wrap(function _callee8$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          if (!(options && options.global)) {\n            _context9.next = 5;\n            break;\n          }\n          gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, eventParams);\n          return _context9.abrupt(\"return\");\n        case 5:\n          _context9.next = 7;\n          return initializationPromise;\n        case 7:\n          measurementId = _context9.sent;\n          params = Object.assign(Object.assign({}, eventParams), {\n            'send_to': measurementId\n          });\n          gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, params);\n        case 10:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee8);\n  }));\n  return _logEvent$.apply(this, arguments);\n}\nfunction setCurrentScreen$1(_x25, _x26, _x27, _x28) {\n  return _setCurrentScreen$.apply(this, arguments);\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\nfunction _setCurrentScreen$() {\n  _setCurrentScreen$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(gtagFunction, initializationPromise, screenName, options) {\n    var measurementId;\n    return _regeneratorRuntime().wrap(function _callee9$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          if (!(options && options.global)) {\n            _context10.next = 5;\n            break;\n          }\n          gtagFunction(\"set\" /* GtagCommand.SET */, {\n            'screen_name': screenName\n          });\n          return _context10.abrupt(\"return\", Promise.resolve());\n        case 5:\n          _context10.next = 7;\n          return initializationPromise;\n        case 7:\n          measurementId = _context10.sent;\n          gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'screen_name': screenName\n          });\n        case 9:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee9);\n  }));\n  return _setCurrentScreen$.apply(this, arguments);\n}\nfunction setUserId$1(_x29, _x30, _x31, _x32) {\n  return _setUserId$.apply(this, arguments);\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\nfunction _setUserId$() {\n  _setUserId$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(gtagFunction, initializationPromise, id, options) {\n    var measurementId;\n    return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          if (!(options && options.global)) {\n            _context11.next = 5;\n            break;\n          }\n          gtagFunction(\"set\" /* GtagCommand.SET */, {\n            'user_id': id\n          });\n          return _context11.abrupt(\"return\", Promise.resolve());\n        case 5:\n          _context11.next = 7;\n          return initializationPromise;\n        case 7:\n          measurementId = _context11.sent;\n          gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'user_id': id\n          });\n        case 9:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee10);\n  }));\n  return _setUserId$.apply(this, arguments);\n}\nfunction setUserProperties$1(_x33, _x34, _x35, _x36) {\n  return _setUserProperties$.apply(this, arguments);\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\nfunction _setUserProperties$() {\n  _setUserProperties$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(gtagFunction, initializationPromise, properties, options) {\n    var flatProperties, _i2, _Object$keys, key, measurementId;\n    return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          if (!(options && options.global)) {\n            _context12.next = 7;\n            break;\n          }\n          flatProperties = {};\n          for (_i2 = 0, _Object$keys = Object.keys(properties); _i2 < _Object$keys.length; _i2++) {\n            key = _Object$keys[_i2];\n            // use dot notation for merge behavior in gtag.js\n            flatProperties[\"user_properties.\".concat(key)] = properties[key];\n          }\n          gtagFunction(\"set\" /* GtagCommand.SET */, flatProperties);\n          return _context12.abrupt(\"return\", Promise.resolve());\n        case 7:\n          _context12.next = 9;\n          return initializationPromise;\n        case 9:\n          measurementId = _context12.sent;\n          gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\n            update: true,\n            'user_properties': properties\n          });\n        case 11:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee11);\n  }));\n  return _setUserProperties$.apply(this, arguments);\n}\nfunction setAnalyticsCollectionEnabled$1(_x37, _x38) {\n  return _setAnalyticsCollectionEnabled$.apply(this, arguments);\n}\n/**\r\n * Consent parameters to default to during 'gtag' initialization.\r\n */\nfunction _setAnalyticsCollectionEnabled$() {\n  _setAnalyticsCollectionEnabled$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(initializationPromise, enabled) {\n    var measurementId;\n    return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return initializationPromise;\n        case 2:\n          measurementId = _context13.sent;\n          window[\"ga-disable-\".concat(measurementId)] = !enabled;\n        case 4:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee12);\n  }));\n  return _setAnalyticsCollectionEnabled$.apply(this, arguments);\n}\nvar defaultConsentSettingsForInit;\n/**\r\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\r\n * analytics.\r\n *\r\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\r\n */\nfunction _setConsentDefaultForInit(consentSettings) {\n  defaultConsentSettingsForInit = consentSettings;\n}\n/**\r\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\r\n * analytics.\r\n *\r\n * @param customParams Any custom params the user may pass to gtag.js.\r\n */\nfunction _setDefaultEventParametersForInit(customParams) {\n  defaultEventParametersForInit = customParams;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateIndexedDB() {\n  return _validateIndexedDB.apply(this, arguments);\n}\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\nfunction _validateIndexedDB() {\n  _validateIndexedDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n    return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          if (isIndexedDBAvailable()) {\n            _context14.next = 5;\n            break;\n          }\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: 'IndexedDB is not available in this environment.'\n          }).message);\n          return _context14.abrupt(\"return\", false);\n        case 5:\n          _context14.prev = 5;\n          _context14.next = 8;\n          return validateIndexedDBOpenable();\n        case 8:\n          _context14.next = 14;\n          break;\n        case 10:\n          _context14.prev = 10;\n          _context14.t0 = _context14[\"catch\"](5);\n          logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\n            errorInfo: _context14.t0 === null || _context14.t0 === void 0 ? void 0 : _context14.t0.toString()\n          }).message);\n          return _context14.abrupt(\"return\", false);\n        case 14:\n          return _context14.abrupt(\"return\", true);\n        case 15:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee13, null, [[5, 10]]);\n  }));\n  return _validateIndexedDB.apply(this, arguments);\n}\nfunction _initializeAnalytics(_x39, _x40, _x41, _x42, _x43, _x44, _x45) {\n  return _initializeAnalytics2.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Analytics Service class.\r\n */\nfunction _initializeAnalytics2() {\n  _initializeAnalytics2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\n    var _a, dynamicConfigPromise, fidPromise, _yield$Promise$all, _yield$Promise$all2, dynamicConfig, fid, configProperties;\n    return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n      while (1) switch (_context15.prev = _context15.next) {\n        case 0:\n          dynamicConfigPromise = fetchDynamicConfigWithRetry(app); // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n          dynamicConfigPromise.then(function (config) {\n            measurementIdToAppId[config.measurementId] = config.appId;\n            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {\n              logger.warn(\"The measurement ID in the local Firebase config (\".concat(app.options.measurementId, \")\") + \" does not match the measurement ID fetched from the server (\".concat(config.measurementId, \").\") + \" To ensure analytics events are always sent to the correct Analytics property,\" + \" update the\" + \" measurement ID field in the local config or remove it from the local config.\");\n            }\n          }).catch(function (e) {\n            return logger.error(e);\n          });\n          // Add to list to track state of all dynamic config promises.\n          dynamicConfigPromisesList.push(dynamicConfigPromise);\n          fidPromise = validateIndexedDB().then(function (envIsValid) {\n            if (envIsValid) {\n              return installations.getId();\n            } else {\n              return undefined;\n            }\n          });\n          _context15.next = 6;\n          return Promise.all([dynamicConfigPromise, fidPromise]);\n        case 6:\n          _yield$Promise$all = _context15.sent;\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n          dynamicConfig = _yield$Promise$all2[0];\n          fid = _yield$Promise$all2[1];\n          // Detect if user has already put the gtag <script> tag on this page with the passed in\n          // data layer name.\n          if (!findGtagScriptOnPage(dataLayerName)) {\n            insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n          }\n          // Detects if there are consent settings that need to be configured.\n          if (defaultConsentSettingsForInit) {\n            gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);\n            _setConsentDefaultForInit(undefined);\n          }\n          // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          gtagCore('js', new Date());\n          // User config added first. We don't want users to accidentally overwrite\n          // base Firebase config properties.\n          configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {}; // guard against developers accidentally setting properties with prefix `firebase_`\n          configProperties[ORIGIN_KEY] = 'firebase';\n          configProperties.update = true;\n          if (fid != null) {\n            configProperties[GA_FID_KEY] = fid;\n          }\n          // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n          // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n          // `configProperties`.\n          gtagCore(\"config\" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);\n          // Detects if there is data that will be set on every event logged from the SDK.\n          if (defaultEventParametersForInit) {\n            gtagCore(\"set\" /* GtagCommand.SET */, defaultEventParametersForInit);\n            _setDefaultEventParametersForInit(undefined);\n          }\n          return _context15.abrupt(\"return\", dynamicConfig.measurementId);\n        case 20:\n        case \"end\":\n          return _context15.stop();\n      }\n    }, _callee14);\n  }));\n  return _initializeAnalytics2.apply(this, arguments);\n}\nvar AnalyticsService = /*#__PURE__*/function () {\n  function AnalyticsService(app) {\n    _classCallCheck(this, AnalyticsService);\n    this.app = app;\n  }\n  _createClass(AnalyticsService, [{\n    key: \"_delete\",\n    value: function _delete() {\n      delete initializationPromisesMap[this.app.options.appId];\n      return Promise.resolve();\n    }\n  }]);\n  return AnalyticsService;\n}();\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\nvar initializationPromisesMap = {};\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\nvar dynamicConfigPromisesList = [];\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\nvar measurementIdToAppId = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\nvar globalInitDone = false;\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\nfunction warnOnBrowserContextMismatch() {\n  var mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    var details = mismatchedEnvMessages.map(function (message, index) {\n      return \"(\".concat(index + 1, \") \").concat(message);\n    }).join(' ');\n    var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\nfunction factory(app, installations, options) {\n  warnOnBrowserContextMismatch();\n  var appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\n  }\n\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" + \" measurement ID for this Firebase app. Falling back to the measurement ID \".concat(app.options.measurementId) + \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\n    } else {\n      throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\n    }\n  }\n\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, {\n      id: appId\n    });\n  }\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    getOrCreateDataLayer(dataLayerName);\n    var _wrapOrCreateGtag = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName),\n      wrappedGtag = _wrapOrCreateGtag.wrappedGtag,\n      gtagCore = _wrapOrCreateGtag.gtagCore;\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\n  var analyticsInstance = new AnalyticsService(app);\n  return analyticsInstance;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction getAnalytics() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n  // Dependencies\n  var analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n  return initializeAnalytics(app);\n}\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\nfunction initializeAnalytics(app) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // Dependencies\n  var analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\n  if (analyticsProvider.isInitialized()) {\n    var existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\n    }\n  }\n\n  var analyticsInstance = analyticsProvider.initialize({\n    options: options\n  });\n  return analyticsInstance;\n}\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\nfunction isSupported() {\n  return _isSupported.apply(this, arguments);\n}\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\nfunction _isSupported() {\n  _isSupported = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n    var isDBOpenable;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          if (!isBrowserExtension()) {\n            _context16.next = 2;\n            break;\n          }\n          return _context16.abrupt(\"return\", false);\n        case 2:\n          if (areCookiesEnabled()) {\n            _context16.next = 4;\n            break;\n          }\n          return _context16.abrupt(\"return\", false);\n        case 4:\n          if (isIndexedDBAvailable()) {\n            _context16.next = 6;\n            break;\n          }\n          return _context16.abrupt(\"return\", false);\n        case 6:\n          _context16.prev = 6;\n          _context16.next = 9;\n          return validateIndexedDBOpenable();\n        case 9:\n          isDBOpenable = _context16.sent;\n          return _context16.abrupt(\"return\", isDBOpenable);\n        case 13:\n          _context16.prev = 13;\n          _context16.t0 = _context16[\"catch\"](6);\n          return _context16.abrupt(\"return\", false);\n        case 16:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15, null, [[6, 13]]);\n  }));\n  return _isSupported.apply(this, arguments);\n}\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\nfunction setUserId(analyticsInstance, id, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\nfunction setUserProperties(analyticsInstance, properties, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\r\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\r\n * all subsequent events.\r\n * @public\r\n * @param customParams - Any custom params the user may pass to gtag.js.\r\n */\nfunction setDefaultEventParameters(customParams) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"set\" /* GtagCommand.SET */, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\nfunction _logEvent(analyticsInstance, eventName, eventParams, options) {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(function (e) {\n    return logger.error(e);\n  });\n}\n/**\r\n * Sets the applicable end user consent state for this web app across all gtag references once\r\n * Firebase Analytics is initialized.\r\n *\r\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\r\n * types are set to \"granted\".\r\n * @public\r\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\r\n */\nfunction setConsent(consentSettings) {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(\"consent\" /* GtagCommand.CONSENT */, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\nvar name = \"@firebase/analytics\";\nvar version = \"0.9.5\";\n\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\nfunction registerAnalytics() {\n  _registerComponent(new Component(ANALYTICS_TYPE, function (container, _ref2) {\n    var analyticsOptions = _ref2.options;\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations-internal').getImmediate();\n    return factory(app, installations, analyticsOptions);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */));\n  _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: function logEvent(eventName, eventParams, options) {\n          return _logEvent(analytics, eventName, eventParams, options);\n        }\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {\n        reason: e\n      });\n    }\n  }\n}\nregisterAnalytics();\nexport { getAnalytics, initializeAnalytics, isSupported, _logEvent as logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };\n//# sourceMappingURL=index.esm2017.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}