{"ast":null,"code":"import _slicedToArray from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useContext, useCallback } from 'react';\nimport * as React from 'react';\nimport { useSSRSafeId } from './ssr';\nimport DropdownContext from './DropdownContext';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var isRoleMenu = function isRoleMenu(el) {\n  var _el$getAttribute;\n  return ((_el$getAttribute = el.getAttribute('role')) == null ? void 0 : _el$getAttribute.toLowerCase()) === 'menu';\n};\nvar noop = function noop() {};\n\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\nexport function useDropdownToggle() {\n  var id = useSSRSafeId();\n  var _ref = useContext(DropdownContext) || {},\n    _ref$show = _ref.show,\n    show = _ref$show === void 0 ? false : _ref$show,\n    _ref$toggle = _ref.toggle,\n    toggle = _ref$toggle === void 0 ? noop : _ref$toggle,\n    setToggle = _ref.setToggle,\n    menuElement = _ref.menuElement;\n  var handleClick = useCallback(function (e) {\n    toggle(!show, e);\n  }, [show, toggle]);\n  var props = {\n    id: id,\n    ref: setToggle || noop,\n    onClick: handleClick,\n    'aria-expanded': !!show\n  };\n\n  // This is maybe better down in an effect, but\n  // the component is going to update anyway when the menu element\n  // is set so might return new props.\n  if (menuElement && isRoleMenu(menuElement)) {\n    props['aria-haspopup'] = true;\n  }\n  return [props, {\n    show: show,\n    toggle: toggle\n  }];\n}\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\nfunction DropdownToggle(_ref2) {\n  var children = _ref2.children;\n  var _useDropdownToggle = useDropdownToggle(),\n    _useDropdownToggle2 = _slicedToArray(_useDropdownToggle, 2),\n    props = _useDropdownToggle2[0],\n    meta = _useDropdownToggle2[1];\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: children(props, meta)\n  });\n}\nDropdownToggle.displayName = 'DropdownToggle';\n\n/** @component */\nexport default DropdownToggle;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}