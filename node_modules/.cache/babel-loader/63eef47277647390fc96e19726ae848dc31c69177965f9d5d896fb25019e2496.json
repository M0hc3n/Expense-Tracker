{"ast":null,"code":"import _objectSpread from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"C:/Users/TRETEC/Desktop/Software Engineering/Tp/code/Expense Tracker Website/light-bootstrap-dashboard-react/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"bsPrefix\", \"split\", \"className\", \"childBsPrefix\", \"as\"];\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownToggle } from '@restart/ui/DropdownToggle';\nimport DropdownContext from '@restart/ui/DropdownContext';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport Button from './Button';\nimport InputGroupContext from './InputGroupContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DropdownToggle = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n    split = _ref.split,\n    className = _ref.className,\n    childBsPrefix = _ref.childBsPrefix,\n    _ref$as = _ref.as,\n    Component = _ref$as === void 0 ? Button : _ref$as,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n  var dropdownContext = useContext(DropdownContext);\n  var isInputGroup = useContext(InputGroupContext);\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n  var _useDropdownToggle = useDropdownToggle(),\n    _useDropdownToggle2 = _slicedToArray(_useDropdownToggle, 1),\n    toggleProps = _useDropdownToggle2[0];\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n\n  return /*#__PURE__*/_jsx(Component, _objectSpread(_objectSpread({\n    className: classNames(className, prefix, split && \"\".concat(prefix, \"-split\"), !!isInputGroup && (dropdownContext == null ? void 0 : dropdownContext.show) && 'show')\n  }, toggleProps), props));\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}